// src/app/layout.tsx
import React from "react";
import { ApolloClientProvider } from "@/graphql-client/Provider";
import { ReduxProvider } from "@/app/store/ReduxProvider";
import LayoutRenderer from "@/components/templates/LayoutRenderer";

import InitColorSchemeScript from "@mui/material/InitColorSchemeScript";
import { AppRouterCacheProvider } from "@mui/material-nextjs/v14-appRouter";
import { themeConfig, ThemeProvider } from "@/theme";

import { detectSettings } from "@/components/settings/server";

import { detectLanguage } from "@/locales/server";

import type { Metadata } from "next";
import "@/global.css";
import {
  SettingsDrawer,
  defaultSettings,
  SettingsProvider,
} from "@/components/settings";

import { CONFIG } from "@/global-config";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

async function getAppConfig() {
  if (CONFIG.isStaticExport) {
    return {
      lang: "en",
      i18nLang: undefined,
      cookieSettings: undefined,
      dir: defaultSettings.direction,
    };
  } else {
    const [lang, settings] = await Promise.all([
      detectLanguage(),
      detectSettings(),
    ]);

    return {
      lang: lang ?? "en",
      i18nLang: lang ?? "en",
      cookieSettings: settings,
      dir: settings.direction,
    };
  }
}
export default async function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  const appConfig = await getAppConfig();

  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <InitColorSchemeScript
          defaultMode={themeConfig.defaultMode}
          modeStorageKey={themeConfig.modeStorageKey}
          attribute={themeConfig.cssVariables.colorSchemeSelector}
        />

        <AppRouterCacheProvider options={{ key: "css" }}>
          <SettingsProvider
            cookieSettings={appConfig.cookieSettings}
            defaultSettings={defaultSettings}
          >
            <ThemeProvider
              defaultMode={themeConfig.defaultMode}
              modeStorageKey={themeConfig.modeStorageKey}
            >
              <ApolloClientProvider>
                <ReduxProvider>
                  <LayoutRenderer>{children}</LayoutRenderer>
                </ReduxProvider>
              </ApolloClientProvider>
            </ThemeProvider>
          </SettingsProvider>
        </AppRouterCacheProvider>
      </body>
    </html>
  );
}
