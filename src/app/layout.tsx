// src/app/layout.tsx
import React from "react";
import { cookies } from "next/headers";
import { ApolloClientProvider } from "@/graphql-client/Provider";
import { ReduxProvider } from "@/providers/ReduxProvider";
import LayoutRenderer from "@/components/templates/LayoutRenderer";

import InitColorSchemeScript from "@mui/material/InitColorSchemeScript";
import { AppRouterCacheProvider } from "@mui/material-nextjs/v14-appRouter";
import { themeConfig, ThemeProvider } from "@/theme";

import { detectSettings } from "@/components/settings/server";

import { detectLanguage } from "@/locales/server";

import type { Metadata } from "next";
import "@/global.css";
import { defaultSettings, SettingsProvider } from "@/components/settings";

import { CONFIG } from "@/global-config";
import { MotionLazy } from "@/components/animate/motion-lazy";
import { client } from "@/lib/apolloClient";
import { ME_QUERY } from "@/graphql-client/auth";
import { IUser } from "@/interfaces";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

async function getAppConfig() {
  if (CONFIG.isStaticExport) {
    return {
      lang: "en",
      i18nLang: undefined,
      cookieSettings: undefined,
      dir: defaultSettings.direction,
    };
  } else {
    const [lang, settings] = await Promise.all([
      detectLanguage(),
      detectSettings(),
    ]);

    return {
      lang: lang ?? "en",
      i18nLang: lang ?? "en",
      cookieSettings: settings,
      dir: settings.direction,
    };
  }
}

const getUser = async (): Promise<IUser | null> => {
  try {
    const cookieStore = await cookies();
    const sessionCookie = cookieStore.get("next-auth.session-token");
    const { data } = await client.query({
      query: ME_QUERY,
      context: {
        headers: {
          Cookie: `next-auth.session-token=${sessionCookie?.value}`, // Pass the cookies to the Apollo query
        },
      },
    });
    return data?.me || null;
  } catch (_error) {
    console.log(_error, "error in getting user");
    return null;
  }
};

export default async function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  const appConfig = await getAppConfig();

  const user = await getUser();

  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <InitColorSchemeScript
          defaultMode={themeConfig.defaultMode}
          modeStorageKey={themeConfig.modeStorageKey}
          attribute={themeConfig.cssVariables.colorSchemeSelector}
        />

        <AppRouterCacheProvider options={{ key: "css" }}>
          <SettingsProvider
            cookieSettings={appConfig.cookieSettings}
            defaultSettings={defaultSettings}
          >
            <ThemeProvider
              defaultMode={themeConfig.defaultMode}
              modeStorageKey={themeConfig.modeStorageKey}
            >
              <MotionLazy>
                <ApolloClientProvider>
                  <ReduxProvider>
                    <LayoutRenderer user={user}>{children}</LayoutRenderer>
                  </ReduxProvider>
                </ApolloClientProvider>
              </MotionLazy>
            </ThemeProvider>
          </SettingsProvider>
        </AppRouterCacheProvider>
      </body>
    </html>
  );
}
